#!/usr/bin/env python3

import argparse
import os
import library
import socket

#client
def parseArgs():
    #initialize
    parser = argparse.ArgumentParser(prog='client.py', description='Specify host and port to connect to', add_help=False) 

    #add arguments
    parser.add_argument('-h', type=str, help="Host", required=True) 
    parser.add_argument('-p', type=str, help="Port", required=True) 

    #parse the arguments 
    args = parser.parse_args()

    return args


def replLOOP():
    running = True
    print("Welcome to SFTP Clone\n")
    while running:
        userInput = input("> ")
        handler(userInput)


# massive switch statement, main program logic, returns a bool of successful or not
def handler(userInput):
    userRequest = library.replParse(str(userInput))


#Source    : Dr Schwesinger's public CPSC 328 Directory
#Retreived : November 12th, 2024
#Link      : /export/home/public/schwesin/cpsc328/examples/2024-11-12/Python
def reallyRecvall(s, n):
    """
    Description : Ensures all the bytes have been received from the client
    Parameters  : s - the socket
                  n - the number of bytes
    """
    bytes = b''
    while len(bytes) != n:
        bytes += s.recv(n - len(bytes))
        if len(bytes) == 0: break
    return bytes

def main():
    args = parseArgs()

    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as client:
            client.connect((args.h, int(args.p))) #connect to the servers
            msgRecv = client.recv(4096)
            print(msgRecv.decode())
            #replLOOP() #enter the repl loop
            client.close() #close the client when done
    except OSError as e:
        print(e)



if __name__ == "__main__":
    main()